{"version":3,"sources":["utils/axios.js","Containers/Logs/Logs.js"],"names":["instance","axios","create","baseURL","Logs","props","useState","loading","setLoading","message","logs","setLogs","panelRef","useRef","formatTime","date","hours","getHours","minutes","getMinutes","ampm","useEffect","headers","localStorage","getItem","then","response","data","console","log","status","alert","history","push","catch","err","io","on","stateLogs","current","scrollTop","scrollHeight","id","className","style","display","justifyContent","textAlign","maxHeight","overflow","ref","length","map","backgroundColor","color","padding","borderRadius","marginRight","Date","createdAt","_id"],"mappings":"gHAAA,YAGMA,EAHN,OAGiBC,EAAMC,OAAO,CAC1BC,QAAS,wCAGEH,O,yFCmGAI,UAtGF,SAACC,GAAU,MAIUC,oBAAS,GAJnB,mBAIbC,EAJa,KAIJC,EAJI,OAKUF,mBAAS,IALnB,mBAKbG,EALa,aAMIH,mBAAS,KANb,mBAMbI,EANa,KAMPC,EANO,KAOdC,EAAWC,iBAAO,MAyBlBC,EAAa,SAAAC,GACf,IAAIC,EAAQD,EAAKE,WACbC,EAAUH,EAAKI,aACfC,EAAOJ,GAAS,GAAK,KAAO,KAKhC,OAHAA,GADAA,GAAgB,KACQ,IAEF,KADtBE,EAAUA,EAAU,GAAK,IAAIA,EAAUA,GACD,IAAME,GAiBhD,OAbAC,qBAAU,WAjCNpB,YAAM,QAAS,CACXqB,QAAS,CACL,eAAgBC,aAAaC,QAAQ,mBAG5CC,MAAK,SAAAC,GACFlB,GAAW,GACX,IAAImB,EAAOD,EAASC,KACpBC,QAAQC,IAAIF,GACM,KAAfA,EAAKG,SACJC,MAAM,sBACN1B,EAAM2B,QAAQC,KAAK,WAEL,KAAfN,EAAKG,QACJnB,EAAQgB,EAAKjB,SAGpBwB,OAAM,SAAAC,GACH3B,GAAW,MAiBA4B,YAAG,oCACXC,GAAG,WAAW,SAAAV,GACjBhB,GAAQ,SAAA2B,GAAS,4BAAQA,GAAR,CAAmBX,YAEzC,IAEHN,qBAAU,WACHT,EAAS2B,UACZ3B,EAAS2B,QAAQC,UAAY5B,EAAS2B,QAAQE,gBAC/C,CAAC/B,IAGA,qBAAKgC,GAAG,eAAR,SACI,qBAAKA,GAAG,aAAR,SACI,qBAAKC,UAAU,kBAAkBC,MAAO,CAACC,QAAS,OAAQC,eAAgB,UAA1E,SACI,sBAAKH,UAAU,oDAAf,UACI,sCACA,uBACA,qBAAKA,UAAU,MAAf,SACI,sBAAKA,UAAU,sBAAf,UACI,qBAAKA,UAAU,gBAAf,iDAIA,qBAAKA,UAAU,aAAaC,MAAO,CAACG,UAAW,OAAQC,UAAW,OAAQC,SAAU,UAAWC,IAAKtC,EAApG,SAEQL,EAAS,2CACTG,EAAKyC,OAAS,EAAG,wDAA0B,0BAEvC,qCAEQzC,EAAK0C,KAAI,SAAAvB,GACL,OAAO,8BACH,sBAAMe,MAAO,CAACS,gBAAiB,UAAWC,MAAO,QAASC,QAAS,EAAGC,aAAc,EAAGC,YAAa,GAApG,SACC3C,EAAW,IAAI4C,KAAK7B,EAAI8B,YAAc,SACtC9B,EAAIpB,UAHMoB,EAAI+B,QAO3B,mBAAGhB,MAAO,CAACG,UAAW,UAAtB,wBAMhB,qBAAKJ,UAAU,eAAf,SACKlC,GAAW","file":"static/js/10.7e98e92b.chunk.js","sourcesContent":["import axios from \"axios\";\n\n\nconst instance = axios.create({\n    baseURL: \"http://paulthebot.chevrtech.com/api\"\n})\n\nexport default instance;","import React, {useEffect, useState, useRef} from 'react';\nimport axios from '../../utils/axios';\nimport { io } from 'socket.io-client';\n\nconst Logs = (props) => {\n    // const [state, setState] = useState({\n    //     margin: 0\n    // });\n    const [loading, setLoading] = useState(false);\n    const [message, setMessage] = useState('');\n    const [logs, setLogs] = useState([]);\n    const panelRef = useRef(null);\n\n    const updateLogs = () => {\n        axios('/logs', {\n            headers: {\n                \"X-Auth-token\": localStorage.getItem('X-Auth-token')\n            }\n        })\n        .then(response => {\n            setLoading(false)\n            let data = response.data;\n            console.log(data)\n            if(data.status == 401) {\n                alert('You need to log in');\n                props.history.push('/login');\n            }\n            if(data.status == 200) {\n                setLogs(data.logs);\n            }\n        })\n        .catch(err => {\n            setLoading(false);            \n        })\n    }\n\n    const formatTime = date => {\n        var hours = date.getHours();\n        var minutes = date.getMinutes();\n        var ampm = hours >= 12 ? 'pm' : 'am';\n        hours = hours % 12;\n        hours = hours ? hours : 12; // the hour '0' should be '12'\n        minutes = minutes < 10 ? '0'+minutes : minutes;\n        var strTime = hours + ':' + minutes + ' ' + ampm;\n        return strTime;\n      }\n\n    useEffect(() => {\n        updateLogs();\n        const socket = io('http://paulthebot.chevrtech.com/');\n        socket.on('message', data => {\n            setLogs(stateLogs => [...stateLogs, data]);\n        });\n    }, []);\n\n    useEffect(() => {\n        if(panelRef.current)\n        panelRef.current.scrollTop = panelRef.current.scrollHeight;\n    }, [logs])\n\n    return (\n        <div id=\"page-wrapper\" >\n            <div id=\"page-inner\">\n                <div className=\"row text-center\" style={{display: \"flex\", justifyContent: 'center'}}>\n                    <div className=\"col-lg-6 col-md-8 col-sm-10 col-xs-10 text-center\">\n                        <h3>Logs</h3>\n                        <br />\n                        <div className='row'>\n                            <div className=\"panel panel-primary\">\n                                <div className=\"panel-heading\">\n                                    Insights about the bot's operation!\n                                </div>\n                                \n                                <div className=\"panel-body\" style={{textAlign: 'left', maxHeight: '60vh', overflow: 'scroll'}} ref={panelRef}>\n                                    {\n                                        loading? <p>Loading...</p>:                                        \n                                        logs.length < 1? <p>Logs will come in here.<br /></p>:\n                                        (\n                                            <>\n                                                {\n                                                    logs.map(log => {\n                                                        return <p key={log._id}>\n                                                            <span style={{backgroundColor: '#428bca', color: 'white', padding: 3, borderRadius: 5, marginRight: 3}}>\n                                                            {formatTime(new Date(log.createdAt)) + ' -> '}</span> \n                                                            {log.message}\n                                                        </p>\n                                                    })\n                                                }\n                                                <p style={{textAlign: 'center'}}>. . .</p>\n                                            </>\n                                        )                                        \n                                    }                                   \n\n                                </div>\n                                <div className=\"panel-footer\">\n                                    {message || 'Only logs in the last 24hours are visible'}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Logs;"],"sourceRoot":""}